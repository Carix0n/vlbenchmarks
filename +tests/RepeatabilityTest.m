classdef RepeatabilityTest < tests.GenericTest
  %RepeatabilityTest
  
  properties
    Opts = struct(...
      'repeatabilityTolerance',0.05,...
      'numCorrTolerance',4,...
      'matchingScoreTolerance',0.05,...
      'numMatchesTolerance',4, ...
      'drawResults',false ...
      );
  end
  
  methods
    function obj = RepeatabilityTest(varargin)
      varargin = obj.configureGenericTest('RepeatabilityTest',varargin{:});
      obj.Opts = vl_argparse(obj.Opts, varargin);
    end
    
    function testAll(obj)
      import localFeatures.*;
      import datasets.*;
      descDet = VggDescriptor('CropFrames',true,'Magnification',3);
      detector = DescriptorAdapter(VggAffine('Detector','haraff','Threshold',1000), descDet);
      dataset = VggAffineDataset('category', 'graf');
      
      obj.detectorPerformance(detector, dataset);
      % Cannot be tested in the current version, with CommonPart=0 are the
      % descriptors matched in m-to-n manner
      %obj.descriptorPerformance(detector, dataset);
    end
    
    function detectorPerformance(obj, detector, dataset)
      % detectorPerformance Test detector repeatability based in geometry
      import benchmarks.*;
      import consistencyModels.*;
      
      origBench = IjcvOriginalBenchmark('CommonPart',1);
      origBench.disableCaching();
      repbench = RepeatabilityBenchmark(...
        HomographyConsistencyModel(...
          'OverlapError', 0.4,...
          'NormaliseFrames',true,...
          'NormalisedScale', 30,...
          'CropFrames',true,...
          'WarpMethod', 'linearise'),...
        'Mode','Repeatability');
      repbench.disableCaching();
      mbench = RepeatabilityBenchmark(...
        HomographyConsistencyModel(...    
          'OverlapError', 0.4,...
          'NormaliseFrames',true,...
          'NormalisedScale', 30,...
          'CropFrames',true,...
          'WarpMethod', 'linearise'),...
        'Mode','MatchingScore');
      mbench.disableCaching();
      
      [rep ncorr mscore nmatch] = obj.evaluateBenchmarks(repbench, mbench, ...
        origBench, detector, dataset);
      
      obj.assertEqual(sprintf('Repeatability - %s', dataset.DatasetName),...
        rep(1,:),rep(2,:), obj.Opts.repeatabilityTolerance);
      obj.assertEqual(sprintf('Num corresp. - %s', dataset.DatasetName),...
        ncorr(1,:),ncorr(2,:), obj.Opts.numCorrTolerance);
      
      obj.assertEqual(sprintf('Matching score - %s', dataset.DatasetName),...
        mscore(1,:),mscore(2,:), obj.Opts.repeatabilityTolerance);
      obj.assertEqual(sprintf('Num matches - %s', dataset.DatasetName),...
        nmatch(1,:),nmatch(2,:), obj.Opts.numCorrTolerance);
    end
    
    function descriptorPerformance(obj, detector, dataset)
      % descriptorPerformance Test det+desc matching score
      import benchmarks.*;
      import consistencyModels.*;
      origBench = IjcvOriginalBenchmark('CommonPart',0);
      consistModel = HomographyConsistencyModel(...
        'OverlapError', 0.5,...
        'NormaliseFrames',false,...
        'Magnification', 1,...
        'CropFrames',false,...
        'WarpMethod', 'linearise');
      
      repbench = RepeatabilityBenchmark(consistModel, 'Mode','Repeatability');
      repbench.disableCaching();
      
      mbench = RepeatabilityBenchmark(consistModel, 'Mode','MatchingScore');
      mbench.disableCaching();
      
      [rep ncorr mscore nmatch] = obj.evaluateBenchmarks(consistModel, repbench, mbench, ...
        origBench, detector, dataset);
      
      obj.assertEqual(sprintf('Repeatability - %s', dataset.DatasetName),...
        rep(2,:),rep(1,:), obj.Opts.repeatabilityTolerance);
      obj.assertEqual(sprintf('Num corresp. - %s', dataset.DatasetName),...
        ncorr(2,:),ncorr(1,:), obj.Opts.numCorrTolerance);
      
      obj.assertEqual(sprintf('Matching score - %s', dataset.DatasetName),...
        mscore(1,:),mscore(2,:), obj.Opts.repeatabilityTolerance);
      obj.assertEqual(sprintf('Num matches - %s', dataset.DatasetName),...
        nmatch(1,:),nmatch(2,:), obj.Opts.numCorrTolerance);
    end
  end
  
  methods (Access = private)
    function [rep ncorr mscore nmatch] = ...
        evaluateBenchmarks(obj, repbench, mbench, origbench, detector, dataset)
      
      rep = zeros(2,dataset.NumImages);
      ncorr = zeros(2,dataset.NumImages);
      mscore = zeros(2,dataset.NumImages);
      nmatch = zeros(2,dataset.NumImages);
      
      for i = 2:dataset.NumImages
        [rep(1,i) ncorr(1,i) repMatches] = ...
          repbench.testFeatureExtractor(detector, ...
          dataset.getSceneGeometry(i), ...
          dataset.getImagePath(1), ...
          dataset.getImagePath(i));
        [mscore(1,i) nmatch(1,i) mMatches] = ...
          mbench.testFeatureExtractor(detector, ...
          dataset.getSceneGeometry(i), ...
          dataset.getImagePath(1), ...
          dataset.getImagePath(i));

        [rep(2,i) ncorr(2,i) mscore(2,i) nmatch(2,i)] = ...
          origbench.testFeatureExtractor(detector, ...
          dataset.getSceneGeometry(i), ...
          dataset.getImagePath(1), ...
          dataset.getImagePath(i));
        [rep(2,i) ncorr(2,i)] = ...
          origbench.testFeatureExtractor(detector, ...
          dataset.getSceneGeometry(i), ...
          dataset.getImagePath(1), ...
          dataset.getImagePath(i));
        % Different results when called with and without descriptors

        
        if obj.Opts.drawResults
          frames = detector.extractFeatures(dataset.getImagePath(1));
          figure(1); clf;
          title('VLB benchmark');
          imshow(imread(dataset.getImagePath(1))); hold on;
          vl_plotframe(frames(:,repMatches(1,:)>0));
          ginput(1);
        end
      end
    end
    
  end
  
end

